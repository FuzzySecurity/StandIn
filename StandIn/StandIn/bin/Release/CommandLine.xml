<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CommandLine</name>
    </assembly>
    <members>
        <member name="T:CommandLine.BaseOptionAttribute">
            <summary>
            Provides base properties for creating an attribute, used to define rules for command line parsing.
            </summary>
        </member>
        <member name="P:CommandLine.BaseOptionAttribute.ShortName">
            <summary>
            Short name of this command line option. You can use only one character.
            </summary>
        </member>
        <member name="P:CommandLine.BaseOptionAttribute.LongName">
            <summary>
            Long name of this command line option. This name is usually a single english word.
            </summary>
        </member>
        <member name="P:CommandLine.BaseOptionAttribute.Required">
            <summary>
            True if this command line option is required.
            </summary>
        </member>
        <member name="P:CommandLine.BaseOptionAttribute.DefaultValue">
            <summary>
            Gets or sets mapped property default value.
            </summary>
        </member>
        <member name="P:CommandLine.BaseOptionAttribute.HelpText">
            <summary>
            A short description of this command line option. Usually a sentence summary. 
            </summary>
        </member>
        <member name="T:CommandLine.HelpOptionAttribute">
            <summary>
            Indicates the instance method that must be invoked when it becomes necessary show your help screen.
            The method signature is an instance method with no parameters and <see cref="T:System.String"/>
            return value.
            </summary>
        </member>
        <member name="M:CommandLine.HelpOptionAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.HelpOptionAttribute"/> class.
            </summary>
        </member>
        <member name="M:CommandLine.HelpOptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.HelpOptionAttribute"/> class.
            Allows you to define short and long option names.
            </summary>
            <param name="shortName">The short name of the option or null if not used.</param>
            <param name="longName">The long name of the option or null if not used.</param>
        </member>
        <member name="P:CommandLine.HelpOptionAttribute.Required">
            <summary>
            Returns always false for this kind of option.
            This behaviour can't be changed by design; if you try set <see cref="P:CommandLine.HelpOptionAttribute.Required"/>
            an <see cref="T:System.InvalidOperationException"/> will be thrown.
            </summary>
        </member>
        <member name="T:CommandLine.OptionArrayAttribute">
            <summary>
            Models an option that can accept multiple values as separated arguments.
            </summary>
        </member>
        <member name="T:CommandLine.OptionAttribute">
            <summary>
            Models an option specification.
            </summary>
        </member>
        <member name="M:CommandLine.OptionAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionAttribute"/> class.
            </summary>
            <param name="shortName">The short name of the option or null if not used.</param>
            <param name="longName">The long name of the option or null if not used.</param>
        </member>
        <member name="P:CommandLine.OptionAttribute.MutuallyExclusiveSet">
            <summary>
            Gets or sets the option's mutually exclusive set.
            </summary>
        </member>
        <member name="M:CommandLine.OptionArrayAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionArrayAttribute"/> class.
            </summary>
            <param name="shortName">The short name of the option or null if not used.</param>
            <param name="longName">The long name of the option or null if not used.</param>
        </member>
        <member name="T:CommandLine.OptionListAttribute">
            <summary>
            Models an option that can accept multiple values.
            Must be applied to a field compatible with an <see cref="T:System.Collections.Generic.IList`1"/> interface
            of <see cref="T:System.String"/> instances.
            </summary>
        </member>
        <member name="M:CommandLine.OptionListAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionListAttribute"/> class.
            </summary>
            <param name="shortName">The short name of the option or null if not used.</param>
            <param name="longName">The long name of the option or null if not used.</param>
        </member>
        <member name="M:CommandLine.OptionListAttribute.#ctor(System.String,System.String,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.OptionListAttribute"/> class.
            </summary>
            <param name="shortName">The short name of the option or null if not used.</param>
            <param name="longName">The long name of the option or null if not used.</param>
            <param name="separator">Values separator character.</param>
        </member>
        <member name="P:CommandLine.OptionListAttribute.Separator">
            <summary>
            Gets or sets the values separator character.
            </summary>
        </member>
        <member name="T:CommandLine.ValueListAttribute">
            <summary>
            Models a list of command line arguments that are not options.
            Must be applied to a field compatible with an <see cref="T:System.Collections.Generic.IList`1"/> interface
            of <see cref="T:System.String"/> instances.
            </summary>
        </member>
        <member name="M:CommandLine.ValueListAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.ValueListAttribute"/> class.
            </summary>
            <param name="concreteType">A type that implements <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="concreteType"/> is null.</exception>
        </member>
        <member name="P:CommandLine.ValueListAttribute.MaximumElements">
            <summary>
            Gets or sets the maximum element allow for the list managed by <see cref="T:CommandLine.ValueListAttribute"/> type.
            If lesser than 0, no upper bound is fixed.
            If equal to 0, no elements are allowed.
            </summary>
        </member>
        <member name="T:CommandLine.BadOptionInfo">
            <summary>
            Models a bad parsed option.
            </summary>
        </member>
        <member name="P:CommandLine.BadOptionInfo.ShortName">
            <summary>
            The short name of the option
            </summary>
            <value>Returns the short name of the option.</value>
        </member>
        <member name="P:CommandLine.BadOptionInfo.LongName">
            <summary>
            The long name of the option
            </summary>
            <value>Returns the long name of the option.</value>
        </member>
        <member name="T:CommandLine.ParsingError">
            <summary>
            Models a parsing error.
            </summary>
        </member>
        <member name="P:CommandLine.ParsingError.BadOption">
            <summary>
            Gets or a the bad parsed option.
            </summary>
            <value>
            The bad option.
            </value>
        </member>
        <member name="P:CommandLine.ParsingError.ViolatesRequired">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CommandLine.ParsingError"/> violates required.
            </summary>
            <value>
            <c>true</c> if violates required; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommandLine.ParsingError.ViolatesFormat">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CommandLine.ParsingError"/> violates format.
            </summary>
            <value>
            <c>true</c> if violates format; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:CommandLine.ParsingError.ViolatesMutualExclusiveness">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:CommandLine.ParsingError"/> violates mutual exclusiveness.
            </summary>
            <value>
            <c>true</c> if violates mutual exclusiveness; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:CommandLine.PostParsingState">
            <summary>
            Models a type that records the parser state afeter parsing.
            </summary>
        </member>
        <member name="P:CommandLine.PostParsingState.Errors">
            <summary>
            Gets a list of parsing errors.
            </summary>
            <value>
            Parsing errors.
            </value>
        </member>
        <member name="T:CommandLine.ICommandLineParser">
            <summary>
            Defines a basic interface to parse command line arguments.
            </summary>
        </member>
        <member name="M:CommandLine.ICommandLineParser.ParseArguments(System.String[],System.Object)">
            <summary>
            Parses a <see cref="T:System.String"/> array of command line arguments, setting values in <paramref name="options"/>
            parameter instance's public fields decorated with appropriate attributes.
            </summary>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments.</param>
            <param name="options">An object's instance used to receive values.
            Parsing rules are defined using <see cref="T:CommandLine.BaseOptionAttribute"/> derived types.</param>
            <returns>True if parsing process succeed.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:CommandLine.ICommandLineParser.ParseArguments(System.String[],System.Object,System.IO.TextWriter)">
            <summary>
            Parses a <see cref="T:System.String"/> array of command line arguments, setting values in <paramref name="options"/>
            parameter instance's public fields decorated with appropriate attributes.
            This overload allows you to specify a <see cref="T:System.IO.TextWriter"/> derived instance for write text messages.         
            </summary>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments.</param>
            <param name="options">An object's instance used to receive values.
            Parsing rules are defined using <see cref="T:CommandLine.BaseOptionAttribute"/> derived types.</param>
            <param name="helpWriter">Any instance derived from <see cref="T:System.IO.TextWriter"/>,
            usually <see cref="P:System.Console.Error"/>. Setting this argument to null, will disable help screen.</param>
            <returns>True if parsing process succeed.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
        </member>
        <member name="T:CommandLine.CommandLineOptionsBase">
            <summary>
            Provides the abstract base class for a strongly typed options target. Used when you need to get parsing errors.
            </summary>
        </member>
        <member name="T:CommandLine.CommandLineParserException">
            <summary>
            This exception is thrown when a generic parsing error occurs.
            </summary>
        </member>
        <member name="T:CommandLine.CommandLineParserSettings">
            <summary>
            Specifies a set of features to configure a <see cref="T:CommandLine.CommandLineParser"/> behavior.
            </summary>
        </member>
        <member name="M:CommandLine.CommandLineParserSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.CommandLineParserSettings"/> class.
            </summary>
        </member>
        <member name="M:CommandLine.CommandLineParserSettings.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.CommandLineParserSettings"/> class,
            setting the case comparison behavior.
            </summary>
            <param name="caseSensitive">If set to true, parsing will be case sensitive.</param>
        </member>
        <member name="M:CommandLine.CommandLineParserSettings.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.CommandLineParserSettings"/> class,
            setting the <see cref="T:System.IO.TextWriter"/> used for help method output.
            </summary>
            <param name="helpWriter">Any instance derived from <see cref="T:System.IO.TextWriter"/>,
            default <see cref="P:System.Console.Error"/>. Setting this argument to null, will disable help screen.</param>
        </member>
        <member name="M:CommandLine.CommandLineParserSettings.#ctor(System.Boolean,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.CommandLineParserSettings"/> class,
            setting case comparison and help output options.
            </summary>
            <param name="caseSensitive">If set to true, parsing will be case sensitive.</param>
            <param name="helpWriter">Any instance derived from <see cref="T:System.IO.TextWriter"/>,
            default <see cref="P:System.Console.Error"/>. Setting this argument to null, will disable help screen.</param>
        </member>
        <member name="M:CommandLine.CommandLineParserSettings.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.CommandLineParserSettings"/> class,
            setting case comparison and mutually exclusive behaviors.
            </summary>
            <param name="caseSensitive">If set to true, parsing will be case sensitive.</param>
            <param name="mutuallyExclusive">If set to true, enable mutually exclusive behavior.</param>
        </member>
        <member name="M:CommandLine.CommandLineParserSettings.#ctor(System.Boolean,System.Boolean,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.CommandLineParserSettings"/> class,
            setting case comparison, mutually exclusive behavior and help output option.
            </summary>
            <param name="caseSensitive">If set to true, parsing will be case sensitive.</param>
            <param name="mutuallyExclusive">If set to true, enable mutually exclusive behavior.</param>
            <param name="helpWriter">Any instance derived from <see cref="T:System.IO.TextWriter"/>,
            default <see cref="P:System.Console.Error"/>. Setting this argument to null, will disable help screen.</param>
        </member>
        <member name="M:CommandLine.CommandLineParserSettings.#ctor(System.Boolean,System.Boolean,System.Boolean,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.CommandLineParserSettings"/> class,
            setting case comparison, mutually exclusive behavior and help output option.
            </summary>
            <param name="caseSensitive">If set to true, parsing will be case sensitive.</param>
            <param name="mutuallyExclusive">If set to true, enable mutually exclusive behavior.</param>
            <param name="ignoreUnknownArguments">If set to true, allow the parser to skip unknown argument, otherwise return a parse failure</param>
            <param name="helpWriter">Any instance derived from <see cref="T:System.IO.TextWriter"/>,
            default <see cref="P:System.Console.Error"/>. Setting this argument to null, will disable help screen.</param>
        </member>
        <member name="P:CommandLine.CommandLineParserSettings.CaseSensitive">
            <summary>
            Gets or sets the case comparison behavior.
            Default is set to true.
            </summary>
        </member>
        <member name="P:CommandLine.CommandLineParserSettings.MutuallyExclusive">
            <summary>
            Gets or sets the mutually exclusive behavior.
            Default is set to false.
            </summary>
        </member>
        <member name="P:CommandLine.CommandLineParserSettings.HelpWriter">
            <summary>
            Gets or sets the <see cref="T:System.IO.TextWriter"/> used for help method output.
            Setting this property to null, will disable help screen.
            </summary>
        </member>
        <member name="P:CommandLine.CommandLineParserSettings.IgnoreUnknownArguments">
            <summary>
            Gets or sets a value indicating if the parser shall move on to the next argument and ignore the given argument if it
            encounter an unknown arguments
            </summary>
            <value>
            <c>true</c> to allow parsing the arguments with differents class options that do not have all the arguments.
            </value>
            <remarks>
            This allows fragmented version class parsing, useful for project with addon where addons also requires command line arguments but
            when these are unknown by the main program at build time.
            </remarks>
        </member>
        <member name="T:CommandLine.CommandLineParser">
            <summary>
            Provides methods to parse command line arguments.
            Default implementation for <see cref="T:CommandLine.ICommandLineParser"/>.
            </summary>
        </member>
        <member name="M:CommandLine.CommandLineParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.CommandLineParser"/> class.
            </summary>
        </member>
        <member name="M:CommandLine.CommandLineParser.#ctor(CommandLine.CommandLineParserSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.CommandLineParser"/> class,
            configurable with a <see cref="T:CommandLine.CommandLineParserSettings"/> object.
            </summary>
            <param name="settings">The <see cref="T:CommandLine.CommandLineParserSettings"/> object is used to configure
            aspects and behaviors of the parser.</param>
        </member>
        <member name="M:CommandLine.CommandLineParser.ParseArguments(System.String[],System.Object)">
            <summary>
            Parses a <see cref="T:System.String"/> array of command line arguments, setting values in <paramref name="options"/>
            parameter instance's public fields decorated with appropriate attributes.
            </summary>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments.</param>
            <param name="options">An object's instance used to receive values.
            Parsing rules are defined using <see cref="T:CommandLine.BaseOptionAttribute"/> derived types.</param>
            <returns>True if parsing process succeed.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:CommandLine.CommandLineParser.ParseArguments(System.String[],System.Object,System.IO.TextWriter)">
            <summary>
            Parses a <see cref="T:System.String"/> array of command line arguments, setting values in <paramref name="options"/>
            parameter instance's public fields decorated with appropriate attributes.
            This overload allows you to specify a <see cref="T:System.IO.TextWriter"/> derived instance for write text messages.         
            </summary>
            <param name="args">A <see cref="T:System.String"/> array of command line arguments.</param>
            <param name="options">An object's instance used to receive values.
            Parsing rules are defined using <see cref="T:CommandLine.BaseOptionAttribute"/> derived types.</param>
            <param name="helpWriter">Any instance derived from <see cref="T:System.IO.TextWriter"/>,
            usually <see cref="P:System.Console.Error"/>. Setting this argument to null, will disable help screen.</param>
            <returns>True if parsing process succeed.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="args"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="options"/> is null.</exception>
        </member>
        <member name="P:CommandLine.CommandLineParser.Default">
            <summary>
            Singleton instance created with basic defaults.
            </summary>
        </member>
        <member name="T:CommandLine.Text.BaseSentenceBuilder">
            <summary>
            Models an abstract sentence builder.
            </summary>
        </member>
        <member name="M:CommandLine.Text.BaseSentenceBuilder.CreateBuiltIn">
            <summary>
            Creates the built in sentence builder.
            </summary>
            <returns>
            The built in sentence builder.
            </returns>
        </member>
        <member name="P:CommandLine.Text.BaseSentenceBuilder.OptionWord">
            <summary>
            Gets a string containing word 'option'.
            </summary>
            <value>
            The word 'option'.
            </value>
        </member>
        <member name="P:CommandLine.Text.BaseSentenceBuilder.AndWord">
            <summary>
            Gets a string containing the word 'and'.
            </summary>
            <value>
            The word 'and'.
            </value>
        </member>
        <member name="P:CommandLine.Text.BaseSentenceBuilder.RequiredOptionMissingText">
            <summary>
            Gets a string containing the sentence 'required option missing'.
            </summary>
            <value>
            The sentence 'required option missing'.
            </value>
        </member>
        <member name="P:CommandLine.Text.BaseSentenceBuilder.ViolatesFormatText">
            <summary>
            Gets a string containing the sentence 'violates format'.
            </summary>
            <value>
            The sentence 'violates format'.
            </value>
        </member>
        <member name="P:CommandLine.Text.BaseSentenceBuilder.ViolatesMutualExclusivenessText">
            <summary>
            Gets a string containing the sentence 'violates mutual exclusiveness'.
            </summary>
            <value>
            The sentence 'violates mutual exclusiveness'.
            </value>
        </member>
        <member name="P:CommandLine.Text.BaseSentenceBuilder.ErrorsHeadingText">
            <summary>
            Gets a string containing the error heading text.
            </summary>
            <value>
            The error heading text.
            </value>
        </member>
        <member name="T:CommandLine.Text.EnglishSentenceBuilder">
            <summary>
            Models an english sentence builder, currently the default one.
            </summary>
        </member>
        <member name="P:CommandLine.Text.EnglishSentenceBuilder.OptionWord">
            <summary>
            Gets a string containing word 'option' in english.
            </summary>
            <value>
            The word 'option' in english.
            </value>
        </member>
        <member name="P:CommandLine.Text.EnglishSentenceBuilder.AndWord">
            <summary>
            Gets a string containing the word 'and' in english.
            </summary>
            <value>
            The word 'and' in english.
            </value>        
        </member>
        <member name="P:CommandLine.Text.EnglishSentenceBuilder.RequiredOptionMissingText">
            <summary>
            Gets a string containing the sentence 'required option missing' in english.
            </summary>
            <value>
            The sentence 'required option missing' in english.
            </value>        
        </member>
        <member name="P:CommandLine.Text.EnglishSentenceBuilder.ViolatesFormatText">
            <summary>
            Gets a string containing the sentence 'violates format' in english.
            </summary>
            <value>
            The sentence 'violates format' in english.
            </value>        
        </member>
        <member name="P:CommandLine.Text.EnglishSentenceBuilder.ViolatesMutualExclusivenessText">
            <summary>
            Gets a string containing the sentence 'violates mutual exclusiveness' in english.
            </summary>
            <value>
            The sentence 'violates mutual exclusiveness' in english.
            </value>        
        </member>
        <member name="P:CommandLine.Text.EnglishSentenceBuilder.ErrorsHeadingText">
            <summary>
            Gets a string containing the error heading text in english.
            </summary>
            <value>
            The error heading text in english.
            </value>
        </member>
        <member name="T:CommandLine.Text.CopyrightInfo">
            <summary>
            Models the copyright informations part of an help text.
            You can assign it where you assign any <see cref="T:System.String"/> instance.
            </summary>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.CopyrightInfo"/> class.
            </summary>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.CopyrightInfo"/> class
            specifying author and year.
            </summary>
            <param name="author">The company or person holding the copyright.</param>
            <param name="year">The year of coverage of copyright.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="author"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.#ctor(System.String,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.CopyrightInfo"/> class
            specifying author and years.
            </summary>
            <param name="author">The company or person holding the copyright.</param>
            <param name="years">The years of coverage of copyright.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="author"/> is null or empty string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when parameter <paramref name="years"/> is not supplied.</exception>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.#ctor(System.Boolean,System.String,System.Int32[])">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.CopyrightInfo"/> class
            specifying symbol case, author and years.
            </summary>
            <param name="isSymbolUpper">The case of the copyright symbol.</param>
            <param name="author">The company or person holding the copyright.</param>
            <param name="years">The years of coverage of copyright.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="author"/> is null or empty string.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when parameter <paramref name="years"/> is not supplied.</exception>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.ToString">
            <summary>
            Returns the copyright informations as a <see cref="T:System.String"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> that contains the copyright informations.</returns>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.op_Implicit(CommandLine.Text.CopyrightInfo)~System.String">
            <summary>
            Converts the copyright informations to a <see cref="T:System.String"/>.
            </summary>
            <param name="info">This <see cref="T:CommandLine.Text.CopyrightInfo"/> instance.</param>
            <returns>The <see cref="T:System.String"/> that contains the copyright informations.</returns>
        </member>
        <member name="M:CommandLine.Text.CopyrightInfo.FormatYears(System.Int32[])">
            <summary>
            When overridden in a derived class, allows to specify a new algorithm to render copyright years
            as a <see cref="T:System.String"/> instance.
            </summary>
            <param name="years">A <see cref="T:System.Int32"/> array of years.</param>
            <returns>A <see cref="T:System.String"/> instance with copyright years.</returns>
        </member>
        <member name="P:CommandLine.Text.CopyrightInfo.CopyrightWord">
            <summary>
            When overridden in a derived class, allows to specify a different copyright word.
            </summary>
        </member>
        <member name="T:CommandLine.Text.HeadingInfo">
            <summary>
            Models the heading informations part of an help text.
            You can assign it where you assign any <see cref="T:System.String"/> instance.
            </summary>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HeadingInfo"/> class
            specifying program name.
            </summary>
            <param name="programName">The name of the program.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="programName"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HeadingInfo"/> class
            specifying program name and version.
            </summary>
            <param name="programName">The name of the program.</param>
            <param name="version">The version of the program.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="programName"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.ToString">
            <summary>
            Returns the heading informations as a <see cref="T:System.String"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> that contains the heading informations.</returns>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.op_Implicit(CommandLine.Text.HeadingInfo)~System.String">
            <summary>
            Converts the heading informations to a <see cref="T:System.String"/>.
            </summary>
            <param name="info">This <see cref="T:CommandLine.Text.HeadingInfo"/> instance.</param>
            <returns>The <see cref="T:System.String"/> that contains the heading informations.</returns>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.WriteMessage(System.String,System.IO.TextWriter)">
            <summary>
            Writes out a string and a new line using the program name specified in the constructor
            and <paramref name="message"/> parameter.
            </summary>
            <param name="message">The <see cref="T:System.String"/> message to write.</param>
            <param name="writer">The target <see cref="T:System.IO.TextWriter"/> derived type.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="message"/> is null or empty string.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="writer"/> is null.</exception>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.WriteMessage(System.String)">
            <summary>
            Writes out a string and a new line using the program name specified in the constructor
            and <paramref name="message"/> parameter to standard output stream.
            </summary>
            <param name="message">The <see cref="T:System.String"/> message to write.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="message"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HeadingInfo.WriteError(System.String)">
            <summary>
            Writes out a string and a new line using the program name specified in the constructor
            and <paramref name="message"/> parameter to standard error stream.
            </summary>
            <param name="message">The <see cref="T:System.String"/> message to write.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="message"/> is null or empty string.</exception>
        </member>
        <member name="T:CommandLine.Text.HandleParsingErrorsDelegate">
            <summary>
            Handle parsing errors delegate.
            </summary>
        </member>
        <member name="T:CommandLine.Text.FormatOptionHelpTextEventArgs">
            <summary>
            Provides data for the FormatOptionHelpText event.
            </summary>
        </member>
        <member name="M:CommandLine.Text.FormatOptionHelpTextEventArgs.#ctor(CommandLine.BaseOptionAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.FormatOptionHelpTextEventArgs"/> class.
            </summary>
            <param name="option">Option to format.</param>
        </member>
        <member name="P:CommandLine.Text.FormatOptionHelpTextEventArgs.Option">
            <summary>
            Gets the option to format.
            </summary>
        </member>
        <member name="T:CommandLine.Text.HelpText">
            <summary>
            Models an help text and collects related informations.
            You can assign it in place of a <see cref="T:System.String"/> instance.
            </summary>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class.
            </summary>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(CommandLine.Text.BaseSentenceBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class 
            specifying the sentence builder.
            </summary>
            <param name="sentenceBuilder">
            A <see cref="T:CommandLine.Text.BaseSentenceBuilder"/> instance.
            </param>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class
            specifying heading informations.
            </summary>
            <param name="heading">A string with heading information or
            an instance of <see cref="T:CommandLine.Text.HeadingInfo"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown when parameter <paramref name="heading"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(CommandLine.Text.BaseSentenceBuilder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class
            specifying the sentence builder and heading informations.
            </summary>
            <param name="sentenceBuilder">
            A <see cref="T:CommandLine.Text.BaseSentenceBuilder"/> instance.
            </param>
            <param name="heading">
            A string with heading information or
            an instance of <see cref="T:CommandLine.Text.HeadingInfo"/>.
            </param>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class
            specifying heading and copyright informations.
            </summary>
            <param name="heading">A string with heading information or
            an instance of <see cref="T:CommandLine.Text.HeadingInfo"/>.</param>
            <param name="copyright">A string with copyright information or
            an instance of <see cref="T:CommandLine.Text.CopyrightInfo"/>.</param>
            <exception cref="T:System.ArgumentException">Thrown when one or more parameters <paramref name="heading"/> are null or empty strings.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.#ctor(System.String,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class
            specifying heading and copyright informations.
            </summary>
            <param name="heading">A string with heading information or
            an instance of <see cref="T:CommandLine.Text.HeadingInfo"/>.</param>
            <param name="copyright">A string with copyright information or
            an instance of <see cref="T:CommandLine.Text.CopyrightInfo"/>.</param>
            <param name="options">The instance that collected command line arguments parsed with <see cref="T:CommandLine.CommandLineParser"/> class.</param>
            <exception cref="T:System.ArgumentException">Thrown when one or more parameters <paramref name="heading"/> are null or empty strings.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.AutoBuild(System.Object)">
            <summary>
            Creates a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class using common defaults.
            </summary>
            <returns>
            An instance of <see cref="T:CommandLine.Text.HelpText"/> class.
            </returns>
            <param name="options">
            The instance that collected command line arguments parsed with <see cref="T:CommandLine.CommandLineParser"/> class.
            </param>
        </member>
        <member name="M:CommandLine.Text.HelpText.AutoBuild(System.Object,CommandLine.Text.HandleParsingErrorsDelegate)">
            <summary>
            Creates a new instance of the <see cref="T:CommandLine.Text.HelpText"/> class using common defaults.
            </summary>
            <returns>
            An instance of <see cref="T:CommandLine.Text.HelpText"/> class.
            </returns>
            <param name="options">
            The instance that collected command line arguments parsed with <see cref="T:CommandLine.CommandLineParser"/> class.
            </param>
            <param name="errDelegate">
            A delegate used to customize the text block for reporting parsing errors.
            </param>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddPreOptionsLine(System.String)">
            <summary>
            Adds a text line after copyright and before options usage informations.
            </summary>
            <param name="value">A <see cref="T:System.String"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="value"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddPostOptionsLine(System.String)">
            <summary>
            Adds a text line at the bottom, after options usage informations.
            </summary>
            <param name="value">A <see cref="T:System.String"/> instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="value"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddOptions(System.Object)">
            <summary>
            Adds a text block with options usage informations.
            </summary>
            <param name="options">The instance that collected command line arguments parsed with <see cref="T:CommandLine.CommandLineParser"/> class.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="options"/> is null.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddOptions(System.Object,System.String)">
            <summary>
            Adds a text block with options usage informations.
            </summary>
            <param name="options">The instance that collected command line arguments parsed with the <see cref="T:CommandLine.CommandLineParser"/> class.</param>
            <param name="requiredWord">The word to use when the option is required.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="requiredWord"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.AddOptions(System.Object,System.String,System.Int32)">
            <summary>
            Adds a text block with options usage informations.
            </summary>
            <param name="options">The instance that collected command line arguments parsed with the <see cref="T:CommandLine.CommandLineParser"/> class.</param>
            <param name="requiredWord">The word to use when the option is required.</param>
            <param name="maximumLength">The maximum length of the help documentation.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="options"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when parameter <paramref name="requiredWord"/> is null or empty string.</exception>
        </member>
        <member name="M:CommandLine.Text.HelpText.RenderParsingErrorsText(CommandLine.CommandLineOptionsBase,System.Int32)">
            <summary>
            Builds a string that contains a parsing error message.
            </summary>
            <param name="options">
            An options target <see cref="T:CommandLine.CommandLineOptionsBase"/> instance that collected command line arguments parsed with the <see cref="T:CommandLine.CommandLineParser"/> class.
            </param>
            <returns>
            The <see cref="T:System.String"/> that contains the parsing error message.
            </returns>
        </member>
        <member name="M:CommandLine.Text.HelpText.ToString">
            <summary>
            Returns the help informations as a <see cref="T:System.String"/>.
            </summary>
            <returns>The <see cref="T:System.String"/> that contains the help informations.</returns>
        </member>
        <member name="M:CommandLine.Text.HelpText.op_Implicit(CommandLine.Text.HelpText)~System.String">
            <summary>
            Converts the help informations to a <see cref="T:System.String"/>.
            </summary>
            <param name="info">This <see cref="T:CommandLine.Text.HelpText"/> instance.</param>
            <returns>The <see cref="T:System.String"/> that contains the help informations.</returns>
        </member>
        <member name="E:CommandLine.Text.HelpText.FormatOptionHelpText">
            <summary>
            Occurs when an option help text is formatted.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.Heading">
            <summary>
            Sets the heading information string.
            You can directly assign a <see cref="T:CommandLine.Text.HeadingInfo"/> instance.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.Copyright">
            <summary>
            Sets the copyright information string.
            You can directly assign a <see cref="T:CommandLine.Text.CopyrightInfo"/> instance.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.MaximumDisplayWidth">
            <summary>
            Gets or sets the maximum width of the display.  This determines word wrap when displaying the text.
            </summary>
            <value>The maximum width of the display.</value>
        </member>
        <member name="P:CommandLine.Text.HelpText.AddDashesToOption">
            <summary>
            Gets or sets the format of options for adding or removing dashes.
            It modifies behavior of <see cref="M:CommandLine.Text.HelpText.AddOptions(System.Object)"/> method.
            </summary>
        </member>
        <member name="P:CommandLine.Text.HelpText.AdditionalNewLineAfterOption">
            <summary>
            Gets or sets whether to add an additional line after the description of the option.
            </summary>
        </member>
        <member name="T:CommandLine.Text.HelpText.MessageEnum">
            <summary>
            Message type enumeration.
            </summary>
        </member>
        <member name="F:CommandLine.Text.HelpText.MessageEnum.ParsingErrorViolatesFormat">
            <summary>
            Parsing error due to a violation of the format of an option value.
            </summary>
        </member>
        <member name="F:CommandLine.Text.HelpText.MessageEnum.ParsingErrorViolatesRequired">
            <summary>
            Parsing error due to a violation of mandatory option.
            </summary>
        </member>
        <member name="F:CommandLine.Text.HelpText.MessageEnum.ParsingErrorViolatesExclusiveness">
            <summary>
            Parsing error due to a violation of the mutual exclusiveness of two or more option.
            </summary>
        </member>
    </members>
</doc>
